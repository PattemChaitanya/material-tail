Sure, let's delve deeper into a more complex and comprehensive theme configuration. This will include advanced customizations such as nested components, advanced typography settings, custom spacing units, breakpoints for responsive design, and global CSS styles. We'll also look into how these customizations are injected and utilized in a more advanced MUI setup with Emotion.
 
### Advanced Theme Configuration
 
1. **Install Required Packages**
   ```bash
   npm install @mui/material @emotion/react @emotion/styled @emotion/cache
   ```
 
2. **Define the Advanced Theme**
 
```javascript
// theme.js
import { createTheme } from '@mui/material/styles';
 
const theme = createTheme({
  palette: {
    primary: {
      light: '#6ec6ff',
      main: '#3498db',
      dark: '#0069c0',
      contrastText: '#fff',
    },
    secondary: {
      light: '#80e27e',
      main: '#2ecc71',
      dark: '#009624',
      contrastText: '#000',
    },
    background: {
      default: '#ecf0f1',
      paper: '#ffffff',
    },
    text: {
      primary: '#2c3e50',
      secondary: '#7f8c8d',
      disabled: '#bdbdbd',
      hint: '#9e9e9e',
    },
  },
  typography: {
    fontFamily: [
      '"Helvetica Neue"',
      'Arial',
      'sans-serif',
    ].join(','),
    fontSize: 16,
    fontWeightLight: 300,
    fontWeightRegular: 400,
    fontWeightMedium: 500,
    fontWeightBold: 700,
    h1: {
      fontSize: '2.5rem',
      fontWeight: 500,
      lineHeight: 1.2,
      letterSpacing: '-0.05rem',
    },
    h2: {
      fontSize: '2rem',
      fontWeight: 500,
      lineHeight: 1.3,
      letterSpacing: '-0.05rem',
    },
    body1: {
      fontSize: '1rem',
      fontWeight: 400,
      lineHeight: 1.5,
    },
    button: {
      fontSize: '0.875rem',
      fontWeight: 500,
      textTransform: 'uppercase',
    },
    // Add other typography styles as needed
  },
  spacing: (factor) => `${0.25 * factor}rem`, // Custom spacing function
  shape: {
    borderRadius: 8, // Global border radius
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: '4px',
          padding: '8px 16px',
        },
        containedPrimary: {
          backgroundColor: '#3498db',
          color: '#fff',
          '&:hover': {
            backgroundColor: '#2980b9',
          },
        },
        sizeLarge: {
          padding: '12px 24px',
          fontSize: '1rem',
        },
      },
    },
    MuiPaper: {
      styleOverrides: {
        root: {
          padding: '16px',
          borderRadius: '8px',
          backgroundColor: '#ffffff',
          boxShadow: '0 1px 3px rgba(0,0,0,0.2)',
        },
      },
    },
    // Override other component styles as needed
  },
  breakpoints: {
    values: {
      xs: 0,
      sm: 600,
      md: 960,
      lg: 1280,
      xl: 1920,
    },
  },
  transitions: {
    duration: {
      shortest: 150,
      shorter: 200,
      short: 250,
      standard: 300,
      complex: 375,
      enteringScreen: 225,
      leavingScreen: 195,
    },
  },
  zIndex: {
    appBar: 1100,
    drawer: 1200,
  },
  overrides: {
    MuiCssBaseline: {
      '@global': {
        body: {
          margin: 0,
          padding: 0,
          backgroundColor: '#ecf0f1',
          fontFamily: 'Arial, sans-serif',
        },
        a: {
          textDecoration: 'none',
          color: 'inherit',
        },
      },
    },
  },
});
 
export default theme;
```
 
3. **Wrap Your Application with the ThemeProvider**
 
```javascript
// App.js
import React from 'react';
import { ThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import theme from './theme';
import { Button, Container, Typography, Paper } from '@mui/material';
 
const App = () => (
  <ThemeProvider theme={theme}>
    <CssBaseline />
    <Container>
      <Typography variant="h1" gutterBottom>
        Welcome to My App
      </Typography>
      <Button variant="contained" color="primary" size="large">
        Primary Button
      </Button>
      <Button variant="contained" color="secondary" size="large">
        Secondary Button
      </Button>
      <Paper>
        <Typography variant="body1">
          This is a Paper component with custom styling.
        </Typography>
      </Paper>
    </Container>
  </ThemeProvider>
);
 
export default App;
```
 
### Advanced Theme Breakdown
 
#### Palette
 
- **primary**: Defines variations of the primary color (light, main, dark, contrastText).
- **secondary**: Defines variations of the secondary color.
- **background**: Default and paper background colors.
- **text**: Different text colors (primary, secondary, disabled, hint).
 
#### Typography
 
- **fontFamily**: Specifies a list of fonts.
- **fontSize**: Default font size.
- **fontWeight**: Various font weights.
- **h1, h2, body1, button**: Custom styles for specific text elements.
 
#### Spacing
 
- **Custom Spacing Function**: Uses a function to calculate spacing based on a factor, providing more flexibility.
 
#### Shape
 
- **borderRadius**: Global border radius for components.
 
#### Components (styleOverrides)
 
- **MuiButton**: Overrides default button styles (root, containedPrimary, sizeLarge).
- **MuiPaper**: Overrides default paper styles.
 
#### Breakpoints
 
- **values**: Defines screen sizes for responsive design.
 
#### Transitions
 
- **duration**: Customizes the duration of transitions.
 
#### ZIndex
 
- **appBar, drawer**: Sets z-index values for specific components.
 
#### Overrides (Global Styles)
 
- **MuiCssBaseline**: Adds global styles applied to the entire application.
 
### Advanced Usage in Components
 
#### Example with `useTheme`
 
```javascript
// CustomComponent.js
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Box, Typography } from '@mui/material';
 
const CustomComponent = () => {
  const theme = useTheme();
 
  return (
    <Box
      sx={{
        backgroundColor: theme.palette.background.paper,
        color: theme.palette.text.primary,
        padding: theme.spacing(2),
        borderRadius: theme.shape.borderRadius,
      }}
    >
      <Typography variant="h2" gutterBottom>
        Custom Component
      </Typography>
      <Typography variant="body1">
        This component uses advanced theme settings.
      </Typography>
    </Box>
  );
};
 
export default CustomComponent;
```
 
#### Example with Emotion's `styled`
 
```javascript
/** @jsxImportSource @emotion/react */
import { css } from '@emotion/react';
import { useTheme } from '@mui/material/styles';
import Button from '@mui/material/Button';
 
const CustomButton = () => {
  const theme = useTheme();
 
  const buttonStyle = css`
    background-color: ${theme.palette.primary.main};
    color: white;
    padding: ${theme.spacing(2)};
    border-radius: ${theme.shape.borderRadius}px;
    &:hover {
      background-color: ${theme.palette.primary.dark};
    }
  `;
 
  return <Button css={buttonStyle}>Custom Styled Button</Button>;
};
 
export default CustomButton;
```
 
### Summary
 
- **Theme Object**: More comprehensive with advanced settings (palette, typography, spacing, shape, components, breakpoints, transitions, z-index, global styles).
- **ThemeProvider**: Provides the theme to all components within its context.
- **Palette**: Advanced color scheme.
- **Typography**: Detailed text styles.
- **Spacing**: Custom spacing function.
- **Shape**: Global border radius.
- **Component Customization**: Detailed overrides for specific components.
- **Breakpoints**: Defined responsive breakpoints.
- **Transitions**: Custom transition durations.
- **ZIndex**: Custom z-index values.
- **Global Styles**: Applied through `MuiCssBaseline`.
 
This advanced setup ensures a highly customized and flexible theming system for your MUI and Emotion - based React application.
